#!/usr/bin/env bash

# Exit the script if any command fails
set -e

# Function to check if a flag is supported by the compiler
is_flag_supported()
{
    local compiler="$1"
    local tmp_src="$2"
    local flag="$3"
    local supported_flags_ref="$4"
    local extra_flags=""

    # If the compiler is Clang, set the extra flags
    if [[ "$compiler" == clang* ]]; then
        extra_flags="-Winvalid-command-line-argument -Wunused-command-line-argument"
    fi

    # Attempt to compile and link the temporary source file with the specified flag
    $compiler -Werror $extra_flags "$flag" -o /tmp/test_output "$tmp_src" >> "../.flags/${compiler}.txt" 2>&1

    if [[ -f /tmp/test_output ]]; then
        echo -e "\033[32m$flag supported by $compiler\033[0m"
        eval "$supported_flags_ref+=('$flag')"
        rm -f /tmp/test_output
        return 1
    else
        echo -e "\033[31m$flag not supported by $compiler\033[0m"
        echo "$flag is not supported" >> "../.flags/${compiler}.txt"
        echo "------------------------------" >> "../.flags/${compiler}.txt"
        rm -f /tmp/test_output
        return 0
    fi
}

# Function to process compiler flags
process_compiler_flags()
{
    local compiler="$1"
    local tmp_src="$2"
    local category="$3"
    shift 3
    local flags=("$@")
    local supported_flags=()

    rm -f "../.flags/${compiler}.txt"

    for flag in "${flags[@]}"; do
        set +e
        is_flag_supported "$compiler" "$tmp_src" "$flag" supported_flags
        set -e
    done

    # Concatenate the flags
    local flags_string
    flags_string=$(IFS=" "; echo "${supported_flags[*]}")

    # Write to file
    printf "%s" "$flags_string" > "../.flags/${compiler}/${category}_flags.txt"
}

process_sanitizer_category()
{
    local compiler="$1"
    local tmp_src="$2"
    local category_name="$3"
    shift 3
    local flags=("$@")
    local supported_flags=()

    # Convert the string into an actual array
    # eval "local flags_array=(\"\${${flags_array_name}[@]}\")"

    # Check the first flag
    set +e
    is_flag_supported "$compiler" "$tmp_src" "${flags[0]}" supported_flags
    set -e

    # Then, check the rest of the flags
    for i in "${!flags[@]}"; do
        if [[ $i -ne 0 ]]; then  # Skip the first element
            set +e
            is_flag_supported "$compiler" "$tmp_src" "${flags[$i]}" supported_flags
            set -e
        fi
    done

    # Concatenate the supported flags
    local flags_string
    flags_string=$(IFS=" "; echo "${supported_flags[*]}")

    # Write to file
    printf "%s" "$flags_string" > "../.flags/${compiler}/${category_name}_sanitizer_flags.txt"
}

# Main processing function
process_flags()
{
    local compiler="$1"
    local tmp_src="$2"

    # https://gcc.gnu.org/onlinedocs/gcc-13.2.0/gcc/Static-Analyzer-Options.html
    local analyzer_flags=(
         "-fanalyzer"
         "-Wanalyzer-allocation-size"
         "-Wanalyzer-deref-before-check"
         "-Wanalyzer-double-fclose"
         "-Wanalyzer-double-free"
         "-Wanalyzer-exposure-through-output-file"
         "-Wanalyzer-exposure-through-uninit-copy"
         "-Wanalyzer-fd-access-mode-mismatch"
         "-Wanalyzer-fd-double-close"
         "-Wanalyzer-fd-leak"
         "-Wanalyzer-fd-phase-mismatch"
         "-Wanalyzer-fd-type-mismatch"
         "-Wanalyzer-fd-use-after-close"
         "-Wanalyzer-fd-use-without-check"
         "-Wanalyzer-file-leak"
         "-Wanalyzer-free-of-non-heap"
         "-Wanalyzer-imprecise-fp-arithmetic"
         "-Wanalyzer-infinite-recursion"
         "-Wanalyzer-jump-through-null"
         "-Wanalyzer-malloc-leak"
         "-Wanalyzer-mismatching-deallocation"
         "-Wanalyzer-null-argument"
         "-Wanalyzer-null-dereference"
         "-Wanalyzer-out-of-bounds"
         "-Wanalyzer-possible-null-argument"
         "-Wanalyzer-possible-null-dereference"
         "-Wanalyzer-putenv-of-auto-var"
         "-Wanalyzer-shift-count-negative"
         "-Wanalyzer-shift-count-overflow"
         "-Wanalyzer-stale-setjmp-buffer"
         "-Wanalyzer-unsafe-call-within-signal-handler"
         "-Wanalyzer-use-after-free"
         "-Wanalyzer-use-of-pointer-in-stale-stack-frame"
         "-Wanalyzer-use-of-uninitialized-value"
         "-Wanalyzer-va-arg-type-mismatch"
         "-Wanalyzer-va-list-exhausted"
         "-Wanalyzer-va-list-leak"
         "-Wanalyzer-va-list-use-after-va-end"
         "-Wanalyzer-write-to-const"
         "-Wanalyzer-write-to-string-literal"
# TODO put back         "-Wanalyzer-too-complex"
#        "-Wno-analyzer-allocation-size"
#        "-Wno-analyzer-deref-before-check"
#        "-Wno-analyzer-double-fclose"
#        "-Wno-analyzer-double-free"
#        "-Wno-analyzer-exposure-through-output-file"
        "-Wanalyzer-exposure-through-uninit-copy"
#        "-Wno-analyzer-fd-access-mode-mismatch"
#        "-Wno-analyzer-fd-double-close"
#        "-Wno-analyzer-fd-leak"
#        "-Wno-analyzer-fd-phase-mismatch"
#        "-Wno-analyzer-fd-type-mismatch"
#        "-Wno-analyzer-fd-use-after-close"
#        "-Wno-analyzer-fd-use-without-check"
#        "-Wno-analyzer-file-leak"
#        "-Wno-analyzer-free-of-non-heap"
#        "-Wno-analyzer-imprecise-fp-arithmetic"
#        "-Wno-analyzer-infinite-recursion"
#        "-Wno-analyzer-jump-through-null"
#        "-Wno-analyzer-malloc-leak"
#        "-Wno-analyzer-mismatching-deallocation"
#        "-Wno-analyzer-out-of-bounds"
#        "-Wno-analyzer-possible-null-argument"
#        "-Wno-analyzer-possible-null-dereference"
#        "-Wno-analyzer-null-argument"
#        "-Wno-analyzer-null-dereference"
#        "-Wno-analyzer-putenv-of-auto-var"
#        "-Wno-analyzer-shift-count-negative"
#        "-Wno-analyzer-shift-count-overflow"
#        "-Wno-analyzer-stale-setjmp-buffer"
#        "-Wno-analyzer-tainted-allocation-size"
#        "-Wno-analyzer-tainted-assertion"
#        "-Wno-analyzer-tainted-array-index"
#        "-Wno-analyzer-tainted-divisor"
#        "-Wno-analyzer-tainted-offset"
#        "-Wno-analyzer-tainted-size"
#        "-Wno-analyzer-unsafe-call-within-signal-handler"
#        "-Wno-analyzer-use-after-free"
#        "-Wno-analyzer-use-of-pointer-in-stale-stack-frame"
#        "-Wno-analyzer-va-arg-type-mismatch"
#        "-Wno-analyzer-va-list-exhausted "
#        "-Wno-analyzer-va-list-leak"
#        "-Wno-analyzer-va-list-use-after-va-end "
#        "-Wno-analyzer-write-to-const"
#        "-Wno-analyzer-write-to-string-literal"
#        "-Wno-analyzer-use-of-uninitialized-value"
    )

    local code_generation_flags=(
#        "-fstack-reuse=reuse-level"
#        "-ftrapv"
#        "-fwrapv"
#        "-fwrapv-pointer"
# TODO add back in        "-fstrict-overflow"
#        "-fexceptions"
#        "-fnon-call-exceptions"
        "-fdelete-dead-exceptions"
#        "-funwind-tables"
#        "-fasynchronous-unwind-tables"
#        "-fno-gnu-unique"
#        "-fpcc-struct-return"
#        "-freg-struct-return"
#        "-fshort-enums"
#        "-fshort-wchar"
#        "-fcommon"
        "-fno-common"
#        "-fno-ident"
#        "-finhibit-size-directive"
#        "-fverbose-asm"
        "-fno-verbose-asm"
        "-frecord-gcc-switches"
        "-fpic"
        "-fPIC"
#        "-fpie"
#        "-fPIE"
        "-fno-plt"
#        "-fno-jump-tables"
#        "-fno-bit-tests"
#        "-ffixed-reg"
#        "-fcall-used-reg"
#        "-fcall-saved-reg"
#        "-fpack-struct[=n]"
#        "-fleading-underscore"
#        "-fno-leading-underscore"
#        "-ftls-model=model"
#        "-ftrampolines"
#        "-fvisibility=[default|internal|hidden|protected]"
#        "-fstrict-volatile-bitfields"
#        "-fsync-libcalls"
#        "-fno-sync-libcalls"
#         "-ffast-math"
         "-fno-fast-math"
#         "-fdenormal-fp-math=<value>"
         "-fstrict-float-cast-overflow"
         "-fmath-errno"
         "-ftrapping-math"
#         "-ffp-contract=<value>"
#         "-fhonor-infinities"
#         "-fhonor-nans"
#         "-fapprox-func"
#         "-fsigned-zeros"
#         "-fassociative-math"
#         "-freciprocal-math"
#         "-funsafe-math-optimizations"
         "-fno-unsafe-math-optimizations"
#         "-ffinite-math-only"
#         "-frounding-math"
#         "-ffp-model=<value>"
#         "-ffp-exception-behavior=<value>"
#         "-ffp-eval-method=<value>"
#         "-fprotect-parens"
#         "-fexcess-precision"
#         "-fcx-limited-range"
#         "-fcx-fortran-rules"
    )

    # https://gcc.gnu.org/onlinedocs/gcc-13.2.0/gcc/Debugging-Options.html
    local debug_flags=(
        "-g"
        "-g1"
        "-g2"
        "-g3"
        "-ggdb"
        "-ggdb0"
        "-ggdb1"
        "-ggdb2"
        "-ggdb3"
#        "-gdwarf"
#        "-gdwarf2"
#        "-gdwarf3"
#        "-gdwarf4"
#        "-gdwarf5"
#        "-gbtf"
#        "-gctf"
#        "-gctf0"
#        "-gctf1"
#        "-gctf2"
#        "-gvms"
#        "-gvms0"
#        "-gvms1"
#        "-gvms2"
        "-fno-eliminate-unused-debug-symbols"
        "-femit-class-debug-always "
        "-fno-merge-debug-strings"
#        "-fdebug-prefix-map=old=new"
        "-fvar-tracking"
        "-fvar-tracking-assignments"
#        "-gsplit-dwarf"
#        "-gdwarf32"
#        "-gdwarf64"
        "-gdescribe-dies"
        "-gpubnames"
        "-ggnu-pubname"
        "-fdebug-types-section"
        "-grecord-gcc-switches"
#        "-gno-record-gcc-switches"
#        "-gstrict-dwarf"
        "-gno-strict-dwarf"
        "-gas-loc-support"
#        "-gno-as-loc-support"
        "-gas-locview-support"
#        "-gno-as-locview-support"
        "-gcolumn-info"
#        "-gno-column-info"
        "-gstatement-frontiers"
#        "-gno-statement-frontiers"
        "-gvariable-location-views"
#        "-gvariable-location-views=incompat5"
#        "-gno-variable-location-views"
#        "-ginternal-reset-location-views"
        "-gno-internal-reset-location-views"
        "-ginline-points"
#        "-gno-inline-points"
#        "-gz[=type]"
#        "-femit-struct-debug-baseonly"
#        "-femit-struct-debug-reduced"
#        "-femit-struct-debug-detailed[=spec-list]"
#        "-fno-dwarf2-cfi-asm "
        "-fno-eliminate-unused-debug-types"
    )

    local instrumentation_flags=(
        "-p"
        "-pg"
        "-fprofile-arcs"
        "--coverage"
        "-ftest-coverage"
        "-fprofile-abs-path"
#        "-fprofile-dir=path"
#        "-fprofile-generate=path"
        "-fprofile-info-section"
#        "-fprofile-info-section=name"
#        "-fprofile-note=path"
#        "-fprofile-prefix-path=path"
#        "-fprofile-prefix-map=old=new"
#        "-fprofile-update=single"
#        "-fprofile-update=atomic"
        "-fprofile-update=prefer-atomic"
#        "-fprofile-filter-files=regex"
#        "-fprofile-exclude-files=regex"
        "-fprofile-reproducible=multithreaded"
#        "-fprofile-reproducible=parallel-runs"
#        "-fprofile-reproducible=serial"
        "-fharden-compares"
        "-fharden-conditional-branches"
#        "-fstack-protector"
        "-fstack-protector-all"
#        "-fstack-protector-strong"
        "-fstack-protector-explicit"
        "-fstack-check"
# TODO this and the one above are mutually exclusive        "-fstack-clash-protection"
#        "-fstack-limit-register=reg"
#        "-fstack-limit-symbol=sym"
#        "-fno-stack-limit"
        "-fsplit-stack"
        "-fvtable-verify=std"
#        "-fvtable-verify=preinit"
#        "-fvtable-verify=none"
#        "-fvtv-debug"
#        "-fvtv-counts"
        "-finstrument-functions"
        "-finstrument-functions-once"
#        "-finstrument-functions-exclude-file-list=f"
#        "-finstrument-functions-exclude-function-list="
#        "-fpatchable-function-entry="
#        "-fcs-profile-generate"
    )

    # https://gcc.gnu.org/onlinedocs/gcc-13.2.0/gcc/Optimize-Options.html
    local optimization_flags=(
        "-O0"
    )

    local warning_flags=(
    # https://gcc.gnu.org/onlinedocs/gcc-13.2.0/gcc/Warning-Options.html
#      "-fsyntax-only"
#      "-fmax-errors=n"
#      "-w"
# TODO: make this the very first flag
# will require modifying the cmake files an Makefiles
      "-Werror"
#      "-Werror="
#      "-Wfatal-errors"
      "-Wpedantic"
      "-pedantic-errors"
      "-Wall"
      "-Wextra"
      "-Wabi"
      "-Wchar-subscripts"
      "-Wdouble-promotion"
      "-Wduplicate-decl-specifier"
      "-Wformat"
      "-Wformat=1"
      "-Wformat=2"
      "-Wformat-overflow"
      "-Wformat-overflow=1"
      "-Wformat-overflow=2"
      "-Wformat-nonliteral"
      "-Wformat-security"
      "-Wformat-signedness"
      "-Wformat-truncation"
      "-Wformat-truncation=1"
      "-Wformat-truncation=2"
      "-Wformat-y2k"
      "-Wnonnull"
      "-Wnonnull-compare"
      "-Wnull-dereference"
      "-Winfinite-recursion"
      "-Winit-self"
      "-Wimplicit"
      "-Wimplicit-fallthrough"
      "-Wimplicit-fallthrough=1"
      "-Wimplicit-fallthrough=2"
      "-Wimplicit-fallthrough=3"
      "-Wimplicit-fallthrough=4"
      "-Wimplicit-fallthrough=5"
      "-Wignored-qualifiers"
      "-Wmain"
      "-Wmisleading-indentation"
      "-Wmissing-attributes"
      "-Wmissing-braces"
      "-Wmissing-include-dirs"
      "-Wmismatched-dealloc"
      "-Wmultistatement-macros"
      "-Wparentheses"
      "-Wsequence-point"
      "-Wreturn-type"
      "-Wshift-negative-value"
      "-Wno-shift-overflow"
      "-Wshift-overflow=1"
      "-Wshift-overflow=2"
      "-Wswitch"
      "-Wswitch-default"
      "-Wswitch-enum"
      "-Wno-switch-bool"
      "-Wsync-nand"
      "-Wtrivial-auto-var-init"
      "-Wunused-but-set-parameter"
      "-Wunused-but-set-variable"
      "-Wunused-function"
      "-Wunused-label"
      "-Wunused-local-typedefs"
      "-Wunused-parameter"
      "-Wunused-variable"
      "-Wunused-const-variable"
      "-Wunused-const-variable=1"
      "-Wunused-const-variable=2"
      "-Wunused-value"
      "-Wunused"
      "-Wuninitialized"
      "-Wmaybe-uninitialized"
      "-Wunknown-pragmas"
      "-Wstrict-aliasing"
      "-Wstrict-aliasing=1"
      "-Wstrict-aliasing=2"
      "-Wstrict-aliasing=3"
# TODO: put back later
#      "-Wstrict-overflow"
#      "-Wstrict-overflow=1"
#      "-Wstrict-overflow=2"
#      "-Wstrict-overflow=3"
#      "-Wstrict-overflow=4"
#      "-Wstrict-overflow=5"
      "-Wstring-compare"
      "-Wstringop-overflow"
      "-Wstringop-overflow=1"
      "-Wstringop-overflow=2"
      "-Wstringop-overflow=3"
      "-Wstringop-overflow=4"
## - these go together
##      "-Wstrict-flex-arrays"
##      "-fstrict-flex-arrays=1"
##      "-fstrict-flex-arrays=2"
##      "-fstrict-flex-arrays=3"
      "-Wsuggest-attribute=pure"
      "-Wsuggest-attribute=const"
      "-Wsuggest-attribute=noreturn"
      "-Wmissing-noreturn"
      "-Wsuggest-attribute=malloc"
      "-Wsuggest-attribute=format"
      "-Wmissing-format-attribute"
      "-Wsuggest-attribute=cold"
      "-Walloc-zero"
###      "-Walloc-size-larger-than=‘PTRDIFF_MAX’"
      "-Walloca"
      "-Walloca-larger-than"
      "-Warith-conversion"
      "-Warray-bounds"
      "-Warray-bounds=1"
      "-Warray-bounds=2"
      "-Warray-compare"
      "-Warray-parameter"
      "-Warray-parameter=1"
      "-Warray-parameter=2"
      "-Wattribute-alias=1"
      "-Wattribute-alias=2"
      "-Wno-attribute-alias"
#      "-Wbidi-chars=unpaired"
#      "-Wbidi-chars=any"
#      "-Wbidi-chars=ucn"
#      "-Wbidi-chars=unpaired,any"
#      "-Wbidi-chars=unpaired,ucn"
#      "-Wbidi-chars=any,ucn"
      "-Wbidi-chars=unpaired,any,ucn"
      "-Wbool-compare"
      "-Wbool-operation"
      "-Wduplicated-branches"
      "-Wduplicated-cond"
      "-Wframe-address"
      "-Wzero-length-bounds"
#      "-Wsystem-headers"
      "-Wtautological-compare"
      "-Wtrampolines"
      "-Wfloat-equal"
#      "-Wtraditional"
# TODO: this fails on linux      "-Wtraditional-conversion"
      "-Wdeclaration-after-statement"
      "-Wshadow"
      "-Wshadow=global"
      "-Wshadow=local"
      "-Wshadow=compatible-local"
###      "-Wlarger-than=‘PTRDIFF_MAX’"
###      "-Wframe-larger-than=‘PTRDIFF_MAX’"
      "-Wfree-nonheap-object"
###      "-Wstack-usage=‘PTRDIFF_MAX’"
      "-Wunsafe-loop-optimizations"
      "-Wpointer-arith"
      "-Wtsan"
      "-Wtype-limits"
      "-Wabsolute-value"
      "-Wcomment"
      "-Wtrigraphs"
      "-Wundef"
      "-Wexpansion-to-defined"
      "-Wunused-macros"
      "-Wbad-function-cast"
      "-Wc++-compat"
      "-Wc++11-compat"
      "-Wc++14-compat"
      "-Wc++17-compat"
      "-Wc++20-compat"
      "-Wcast-qual"
      "-Wcast-align"
      "-Wcast-align=strict"
      "-Wcast-function-type"
      "-Wwrite-strings"
      "-Wclobbered"
      "-Wconversion"
      "-Wdangling-else"
      "-Wdangling-pointer"
      "-Wdangling-pointer=1"
      "-Wdangling-pointer=2"
      "-Wdate-time"
      "-Wempty-body"
      "-Wenum-compare"
      "-Wenum-conversion"
      "-Wenum-int-mismatch"
      "-Wjump-misses-init"
      "-Wsign-compare"
      "-Wsign-conversion"
      "-Wfloat-conversion"
      "-Wsizeof-array-div"
      "-Wsizeof-pointer-div"
      "-Wsizeof-pointer-memaccess"
      "-Wmemset-elt-size"
      "-Wmemset-transposed-args"
      "-Waddress"
      "-Wlogical-op"
      "-Wlogical-not-parentheses"
      "-Waggregate-return"
      "-Wstrict-prototypes"
      "-Wold-style-declaration"
      "-Wmissing-parameter-type"
      "-Wmissing-prototypes"
      "-Wmissing-declarations"
      "-Wmissing-field-initializers"
#      "-Wnormalized=none"
#      "-Wnormalized=id"
#      "-Wnormalized=nfc"
      "-Wnormalized=nfkc"
      "-Wopenacc-parallelism"
      "-Wopenmp-simd"
      "-Woverride-init"
      "-Wpacked"
      "-Wpacked-not-aligned"
#      "-Wpadded"
      "-Wredundant-decls"
      "-Wrestrict"
      "-Wnested-externs"
      "-Winline"
      "-Winterference-size"
      "-Wint-in-bool-context"
      "-Winvalid-pch"
      "-Winvalid-utf8"
      "-Wlong-long"
      "-Wno-long-long"
      "-Wvariadic-macros"
      "-Wvector-operation-performance"
      "-Wvla"
###      "-Wvla-larger-than=‘PTRDIFF_MAX’"
      "-Wvla-parameter"
      "-Wvolatile-register-var"
      "-Wxor-used-as-pow"
      "-Wdisabled-optimization"
      "-Wpointer-sign"
## goes with -fstack-protector
##      "-Wstack-protector"
# TODO fix this      "-Wunsuffixed-float-constants"
# https://clang.llvm.org/docs/DiagnosticsReference.html
      "-Wno-poison-system-directories"
      "-Wno-invalid-command-line-argument"
      "-Wno-unused-command-line-argument"
      "-W#pragma-messages"
      "-WCFString-literal"
      "-WCL4"
      "-WIndependentClass-attribute"
      "-WNSObject-attribute"
      "-Wabstract-final-class"
      "-Wabstract-vbase-init"
      "-Waddress-of-packed-member"
      "-Waddress-of-temporary"
      "-Waix-compat"
      "-Walign-mismatch"
      "-Walloca-with-align-alignof"
      "-Walways-inline-coroutine"
      "-Wambiguous-delete"
      "-Wambiguous-ellipsis"
      "-Wambiguous-macro"
      "-Wambiguous-member-template"
      "-Wambiguous-reversed-operator"
      "-Wanalyzer-incompatible-plugin"
      "-Wandroid-unversioned-fallback"
      "-Wanon-enum-enum-conversion"
      "-Wanonymous-pack-parens"
      "-Wapinotes"
      "-Warc"
      "-Warc-bridge-casts-disallowed-in-nonarc"
      "-Warc-maybe-repeated-use-of-weak"
      "-Warc-non-pod-memaccess"
      "-Warc-performSelector-leaks"
      "-Warc-repeated-use-of-weak"
      "-Warc-retain-cycles"
      "-Warc-unsafe-retained-assign"
      "-Wargument-outside-range"
      "-Wargument-undefined-behaviour"
      "-Warray-bounds-pointer-arithmetic"
      "-Wasm"
      "-Wasm-operand-widths"
      "-Wassign-enum"
      "-Wassume"
      "-Wat-protocol"
      "-Watimport-in-framework-header"
      "-Watomic-access"
      "-Watomic-alignment"
      "-Watomic-implicit-seq-cst"
      "-Watomic-memory-ordering"
      "-Watomic-properties"
      "-Watomic-property-with-user-defined-accessor"
      "-Wattribute-packed-for-bitfield"
      "-Wattribute-warning"
      "-Wattributes"
      "-Wauto-decl-extensions"
      "-Wauto-disable-vptr-sanitizer"
      "-Wauto-import"
      "-Wauto-storage-class"
      "-Wauto-var-id"
      "-Wavailability"
      "-Wavr-rtlib-linking-quirks"
      "-Wbackend-plugin"
      "-Wbackslash-newline-escape"
      "-Wbinary-literal"
      "-Wbind-to-temporary-copy"
      "-Wbinding-in-condition"
      "-Wbit-int-extension"
      "-Wbitfield-constant-conversion"
      "-Wbitfield-enum-conversion"
      "-Wbitfield-width"
      "-Wbitwise-conditional-parentheses"
      "-Wbitwise-instead-of-logical"
      "-Wbitwise-op-parentheses"
      "-Wblock-capture-autoreleasing"
      "-Wbool-conversion"
      "-Wbraced-scalar-init"
      "-Wbranch-protection"
      "-Wbridge-cast"
      "-Wbuiltin-assume-aligned-alignment"
      "-Wbuiltin-macro-redefined"
      "-Wbuiltin-memcpy-chk-size"
      "-Wbuiltin-requires-header"
      "-Wc++23-extensions"
      "-Wc++23-lambda-attributes"
      "-Wcall-to-pure-virtual-from-ctor-dtor"
      "-Wcalled-once-parameter"
      "-Wcast-calling-convention"
      "-Wcast-function-type-strict"
      "-Wcast-of-sel-type"
      "-Wcast-qual-unrelated"
      "-Wchar-align"
      "-Wclang-cl-pch"
      "-Wclass-conversion"
      "-Wclass-varargs"
      "-Wcmse-union-leak"
      "-Wcomma"
      "-Wcompare-distinct-pointer-types"
      "-Wcompletion-handler"
      "-Wcomplex-component-init"
      "-Wcompound-token-split"
      "-Wcompound-token-split-by-macro"
      "-Wcompound-token-split-by-space"
      "-Wconditional-type-mismatch"
      "-Wconditional-uninitialized"
      "-Wconfig-macros"
      "-Wconstant-conversion"
      "-Wconstant-evaluated"
      "-Wconstant-logical-operand"
      "-Wconstexpr-not-const"
      "-Wconsumed"
      "-Wcoro-non-aligned-allocation-function"
      "-Wcoroutine"
      "-Wcoroutine-missing-unhandled-exception"
      "-Wcovered-switch-default"
      "-Wcstring-format-directive"
      "-Wctad-maybe-unsupported"
      "-Wctor-dtor-privacy"
      "-Wctu"
      "-Wcuda-compat"
      "-Wcustom-atomic-properties"
      "-Wcxx-attribute-extension"
      "-Wdangling"
      "-Wdangling-field"
      "-Wdangling-gsl"
      "-Wdangling-initializer-list"
      "-Wdarwin-sdk-settings"
      "-Wdealloc-in-category"
      "-Wdebug-compression-unavailable"
      "-Wdefaulted-function-deleted"
      "-Wdelegating-ctor-cycles"
      "-Wdelete-abstract-non-virtual-dtor"
      "-Wdelete-incomplete"
      "-Wdelete-non-abstract-non-virtual-dtor"
      "-Wdelete-non-virtual-dtor"
      "-Wdelimited-escape-sequence-extension"
      "-Wdeprecate-lax-vec-conv-all"
      "-Wdeprecated"
      "-Wdeprecated-altivec-src-compat"
      "-Wdeprecated-anon-enum-enum-conversion"
      "-Wdeprecated-array-compare"
      "-Wdeprecated-attributes"
      "-Wdeprecated-builtins"
      "-Wdeprecated-comma-subscript"
      "-Wdeprecated-copy"
      "-Wdeprecated-copy-dtor"
      "-Wdeprecated-copy-with-dtor"
      "-Wdeprecated-copy-with-user-provided-copy"
      "-Wdeprecated-copy-with-user-provided-dtor"
      "-Wdeprecated-coroutine"
      "-Wdeprecated-declarations"
      "-Wdeprecated-dynamic-exception-spec"
      "-Wdeprecated-enum-compare"
      "-Wdeprecated-enum-compare-conditional"
      "-Wdeprecated-enum-enum-conversion"
      "-Wdeprecated-enum-float-conversion"
      "-Wdeprecated-implementations"
      "-Wdeprecated-increment-bool"
      "-Wdeprecated-literal-operator"
      "-Wdeprecated-module-dot-map"
      "-Wdeprecated-non-prototype"
      "-Wdeprecated-objc-isa-usage"
      "-Wdeprecated-objc-pointer-introspection"
      "-Wdeprecated-objc-pointer-introspection-performSelector"
      "-Wdeprecated-pragma"
      "-Wdeprecated-redundant-constexpr-static-def"
      "-Wdeprecated-static-analyzer-flag"
      "-Wdeprecated-this-capture"
      "-Wdeprecated-type"
      "-Wdeprecated-volatile"
      "-Wdeprecated-writable-strings"
      "-Wdirect-ivar-access"
      "-Wdisabled-macro-expansion"
      "-Wdiscard-qual"
      "-Wdistributed-object-modifiers"
      "-Wdivision-by-zero"
      "-Wdll-attribute-on-redeclaration"
      "-Wdllexport-explicit-instantiation-decl"
      "-Wdllimport-static-field-def"
      "-Wdocumentation"
      "-Wdocumentation-deprecated-sync"
      "-Wdocumentation-html"
      "-Wdocumentation-pedantic"
      "-Wdocumentation-unknown-command"
      "-Wdollar-in-identifier-extension"
      "-Wdtor-name"
      "-Wdtor-typedef"
      "-Wduplicate-enum"
      "-Wduplicate-method-arg"
      "-Wduplicate-method-match"
      "-Wduplicate-protocol"
      "-Wdxil-validation"
      "-Wdynamic-class-memaccess"
      "-Wdynamic-exception-spec"
      "-Weager-load-cxx-named-modules"
      "-Welaborated-enum-base"
      "-Welaborated-enum-class"
      "-Wembedded-directive"
      "-Wempty-decomposition"
      "-Wempty-init-stmt"
      "-Wempty-translation-unit"
      "-Wencode-type"
      "-Wendif-labels"
      "-Wenum-compare-conditional"
      "-Wenum-compare-switch"
      "-Wenum-constexpr-conversion"
      "-Wenum-float-conversion"
      "-Wenum-too-large"
      "-Wexceptions"
      "-Wexcess-initializers"
      "-Wexcessive-regsave"
      "-Wexit-time-destructors"
      "-Wexperimental-header-units"
      "-Wexplicit-initialize-call"
      "-Wexplicit-ownership-type"
      "-Wexport-unnamed"
      "-Wextern-c-compat"
      "-Wextern-initializer"
      "-Wextra-qualification"
      "-Wextra-semi"
      "-Wextra-semi-stmt"
      "-Wextra-tokens"
      "-Wfinal-dtor-non-final-class"
      "-Wfinal-macro"
      "-Wfixed-enum-extension"
      "-Wfixed-point-overflow"
      "-Wflag-enum"
      "-Wflexible-array-extensions"
      "-Wfloat-overflow-conversion"
      "-Wfloat-zero-conversion"
      "-Wfor-loop-analysis"
      "-Wformat-extra-args"
      "-Wformat-insufficient-args"
      "-Wformat-invalid-specifier"
      "-Wformat-non-iso"
      "-Wformat-overflow-non-kprintf"
      "-Wformat-pedantic"
      "-Wformat-truncation-non-kprintf"
      "-Wformat-type-confusion"
      "-Wformat-zero-length"
      "-Wfortify-source"
      "-Wfour-char-constants"
      "-Wframe-larger-than"
      "-Wframework-include-private-from-public"
      "-Wfriend-enum"
      "-Wfunction-def-in-objc-container"
      "-Wfunction-multiversion"
      "-Wfuse-ld-path"
      "-Wfuture-attribute-extensions"
      "-Wfuture-compat"
      "-Wgeneric-type-extension"
      "-Wglobal-constructors"
      "-Wglobal-isel"
      "-Wheader-guard"
      "-Wheader-hygiene"
      "-Whip-omp-target-directives"
      "-Whip-only"
      "-Whlsl-extensions"
      "-Widiomatic-parentheses"
      "-Wignored-attributes"
      "-Wignored-availability-without-sdk-settings"
      "-Wignored-gch"
      "-Wignored-optimization-argument"
      "-Wignored-pragma-intrinsic"
      "-Wignored-pragma-optimize"
      "-Wignored-pragmas"
      "-Wignored-reference-qualifiers"
      "-Wimplicit-atomic-properties"
      "-Wimplicit-const-int-float-conversion"
      "-Wimplicit-conversion-floating-point-to-bool"
      "-Wimplicit-exception-spec-mismatch"
      "-Wimplicit-fallthrough-per-function"
      "-Wimplicit-fixed-point-conversion"
      "-Wimplicit-float-conversion"
      "-Wimplicit-function-declaration"
      "-Wimplicit-int"
      "-Wimplicit-int-conversion"
      "-Wimplicit-int-float-conversion"
      "-Wimplicit-retain-self"
      "-Wimplicitly-unsigned-literal"
      "-Wimport"
      "-Wimport-preprocessor-directive-pedantic"
      "-Winaccessible-base"
      "-Winclude-angled-in-module-purview"
      "-Winclude-next-absolute-path"
      "-Winclude-next-outside-header"
      "-Wincompatible-exception-spec"
      "-Wincompatible-function-pointer-types"
      "-Wincompatible-function-pointer-types-strict"
      "-Wincompatible-library-redeclaration"
      "-Wincompatible-ms-pragma-section"
      "-Wincompatible-ms-struct"
      "-Wincompatible-pointer-types"
      "-Wincompatible-pointer-types-discards-qualifiers"
      "-Wincompatible-property-type"
      "-Wincompatible-sysroot"
      "-Wincomplete-framework-module-declaration"
      "-Wincomplete-implementation"
      "-Wincomplete-module"
      "-Wincomplete-setjmp-declaration"
      "-Wincomplete-umbrella"
      "-Winconsistent-dllimport"
      "-Winconsistent-missing-destructor-override"
      "-Winconsistent-missing-override"
      "-Wincrement-bool"
      "-Winitializer-overrides"
      "-Winjected-class-name"
      "-Winline-asm"
      "-Winline-namespace-reopened-noninline"
      "-Winline-new-delete"
      "-Winstantiation-after-specialization"
      "-Wint-conversion"
      "-Wint-conversions"
      "-Wint-to-pointer-cast"
      "-Wint-to-void-pointer-cast"
      "-Winteger-overflow"
      "-Winvalid-command-line-argument"
      "-Winvalid-constexpr"
      "-Winvalid-feature-combination"
      "-Winvalid-iboutlet"
      "-Winvalid-initializer-from-system-header"
      "-Winvalid-ios-deployment-target"
      "-Winvalid-no-builtin-names"
      "-Winvalid-noreturn"
      "-Winvalid-offsetof"
      "-Winvalid-or-nonexistent-directory"
      "-Winvalid-partial-specialization"
      "-Winvalid-pp-token"
      "-Winvalid-source-encoding"
      "-Winvalid-static-assert-message"
      "-Winvalid-token-paste"
      "-Winvalid-unevaluated-string"
      "-Wjump-seh-finally"
      "-Wkeyword-compat"
      "-Wkeyword-macro"
      "-Wknl-knm-isa-support-removed"
      "-Wknr-promoted-parameter"
      "-Wlanguage-extension-token"
      "-Wlarge-by-value-copy"
      "-Wliblto"
      "-Wlinker-warnings"
      "-Wliteral-conversion"
      "-Wliteral-range"
      "-Wlocal-type-template-args"
      "-Wlogical-op-parentheses"
      "-Wloop-analysis"
      "-Wmacro-redefined"
      "-Wmain-return-type"
      "-Wmalformed-warning-check"
      "-Wmany-braces-around-scalar-init"
      "-Wmathematical-notation-identifier-extension"
      "-Wmax-tokens"
      "-Wmax-unsigned-zero"
      "-Wmemsize-comparison"
      "-Wmethod-signatures"
      "-Wmisexpect"
      "-Wmismatched-new-delete"
      "-Wmismatched-parameter-types"
      "-Wmismatched-return-types"
      "-Wmismatched-tags"
      "-Wmissing-constinit"
      "-Wmissing-exception-spec"
      "-Wmissing-method-return-type"
      "-Wmissing-multilib"
      "-Wmissing-noescape"
      "-Wmissing-prototype-for-cc"
      "-Wmissing-selector-name"
      "-Wmissing-sysroot"
      "-Wmissing-variable-declarations"
      "-Wmisspelled-assumption"
      "-Wmodule-conflict"
      "-Wmodule-file-config-mismatch"
      "-Wmodule-file-extension"
      "-Wmodule-import-in-extern-c"
      "-Wmodules-ambiguous-internal-linkage"
      "-Wmodules-import-nested-redundant"
      "-Wmost"
      "-Wmove"
      "-Wmsvc-include"
      "-Wmsvc-not-found"
      "-Wmulti-gpu"
      "-Wmultichar"
      "-Wmultiple-move-vbase"
      "-Wnan-infinity-disabled"
      "-Wnarrowing"
      "-Wnested-anon-types"
      "-Wnew-returns-null"
      "-Wnewline-eof"
      "-Wnoderef"
      "-Wnoexcept-type"
      "-Wnon-c-typedef-for-linkage"
      "-Wnon-literal-null-conversion"
      "-Wnon-modular-include-in-framework-module"
      "-Wnon-modular-include-in-module"
      "-Wnon-pod-varargs"
      "-Wnon-power-of-two-alignment"
      "-Wnon-virtual-dtor"
      "-Wnonportable-cfstrings"
      "-Wnonportable-include-path"
      "-Wnonportable-private-apinotes-path"
      "-Wnonportable-private-system-apinotes-path"
      "-Wnonportable-system-include-path"
      "-Wnonportable-vector-initialization"
      "-Wnontrivial-memaccess"
      "-Wnsconsumed-mismatch"
      "-Wnsreturns-mismatch"
      "-Wnull-arithmetic"
      "-Wnull-character"
      "-Wnull-conversion"
      "-Wnull-dereference"
      "-Wnull-pointer-arithmetic"
      "-Wnull-pointer-subtraction"
      "-Wnullability"
      "-Wnullability-completeness"
      "-Wnullability-completeness-on-arrays"
      "-Wnullability-declspec"
      "-Wnullability-extension"
      "-Wnullability-inferred-on-nested-type"
      "-Wnullable-to-nonnull-conversion"
      "-Wodr"
      "-Wold-style-cast"
      "-Wold-style-definition"
      "-Wopenacc"
      "-Wopencl-unsupported-rgba"
      "-Wopenmp"
      "-Wopenmp-51-extensions"
      "-Wopenmp-clauses"
      "-Wopenmp-extensions"
      "-Wopenmp-loop-form"
      "-Wopenmp-mapping"
      "-Wopenmp-target"
      "-Wopenmp-target-exception"
      "-Woption-ignored"
      "-Wordered-compare-function-pointers"
      "-Wout-of-line-declaration"
      "-Wout-of-scope-function"
      "-Wover-aligned"
      "-Woverflow"
      "-Woverlength-strings"
      "-Woverloaded-shift-op-parentheses"
      "-Woverloaded-virtual"
      "-Woverride-module"
      "-Woverriding-method-mismatch"
      "-Woverriding-option"
      "-Wpacked-non-pod"
      "-Wpadded-bitfield"
      "-Wparentheses-equality"
      "-Wpartial-availability"
      "-Wpch-date-time"
      "-Wpedantic-core-features"
      "-Wpedantic-macros"
      "-Wpessimizing-move"
      "-Wpointer-bool-conversion"
      "-Wpointer-compare"
      "-Wpointer-integer-compare"
      "-Wpointer-to-enum-cast"
      "-Wpointer-to-int-cast"
      "-Wpointer-type-mismatch"
      "-Wno-poison-system-directories"
      "-Wpotentially-direct-selector"
      "-Wpotentially-evaluated-expression"
      "-Wpragma-clang-attribute"
      "-Wpragma-once-outside-header"
      "-Wpragma-pack"
      "-Wpragma-pack-suspicious-include"
      "-Wpragma-system-header-outside-header"
      "-Wpragmas"
      "-Wpre-openmp-51-compat"
      "-Wpredefined-identifier-outside-function"
      "-Wprivate-extern"
      "-Wprivate-header"
      "-Wprivate-module"
      "-Wprofile-instr-missing"
      "-Wprofile-instr-out-of-date"
      "-Wprofile-instr-unprofiled"
      "-Wproperty-access-dot-syntax"
      "-Wproperty-attribute-mismatch"
      "-Wprotocol"
      "-Wprotocol-property-synthesis-ambiguity"
      "-Wpsabi"
      "-Wqualified-void-return-type"
      "-Wquoted-include-in-framework-header"
      "-Wrange-loop-analysis"
      "-Wrange-loop-bind-reference"
      "-Wrange-loop-construct"
      "-Wread-only-types"
      "-Wreadonly-iboutlet-property"
      "-Wreceiver-expr"
      "-Wreceiver-forward-class"
      "-Wredeclared-class-member"
      "-Wredundant-consteval-if"
      "-Wredundant-move"
      "-Wredundant-parens"
      "-Wregister"
      "-Wreinterpret-base-class"
      "-Wreorder"
      "-Wreorder-ctor"
      "-Wreorder-init-list"
      "-Wrequires-super-attribute"
      "-Wreserved-id-macro"
      "-Wreserved-identifier"
      "-Wreserved-macro-identifier"
      "-Wreserved-module-identifier"
      "-Wreserved-user-defined-literal"
      "-Wrestrict-expansion"
      "-Wretained-language-linkage"
      "-Wreturn-local-addr"
      "-Wreturn-stack-address"
      "-Wreturn-std-move"
      "-Wreturn-type-c-linkage"
      "-Wrewrite-not-bool"
      "-Wrtti"
      "-Wsarif-format-unstable"
      "-Wsection"
      "-Wselector"
      "-Wselector-type-mismatch"
      "-Wself-assign"
      "-Wself-assign-field"
      "-Wself-assign-overloaded"
      "-Wself-move"
      "-Wsemicolon-before-method-body"
      "-Wsentinel"
      "-Wserialized-diagnostics"
      "-Wshadow-all"
      "-Wshadow-field"
      "-Wshadow-field-in-constructor"
      "-Wshadow-field-in-constructor-modified"
      "-Wshadow-ivar"
      "-Wshadow-uncaptured-local"
      "-Wshift-count-negative"
      "-Wshift-count-overflow"
      "-Wshift-op-parentheses"
      "-Wshift-overflow"
      "-Wshift-sign-overflow"
      "-Wshorten-64-to-32"
      "-Wsign-promo"
      "-Wsigned-enum-bitfield"
      "-Wsigned-unsigned-wchar"
      "-Wsingle-bit-bitfield-constant-conversion"
      "-Wsizeof-array-argument"
      "-Wsizeof-array-decay"
      "-Wslash-u-filename"
      "-Wslh-asm-goto"
      "-Wsometimes-uninitialized"
      "-Wsource-mgr"
      "-Wsource-uses-openacc"
      "-Wsource-uses-openmp"
      "-Wspir-compat"
      "-Wspirv-compat"
      "-Wstack-exhausted"
      "-Wstack-protector"
      "-Wstatic-float-init"
      "-Wstatic-in-inline"
      "-Wstatic-inline-explicit-instantiation"
      "-Wstatic-local-in-inline"
      "-Wstatic-self-init"
      "-Wstdlibcxx-not-found"
      "-Wstrict-aliasing=0"
      "-Wstrict-potentially-direct-selector"
      "-Wstrict-selector-match"
      "-Wstring-concatenation"
      "-Wstring-conversion"
      "-Wstring-plus-char"
      "-Wstring-plus-int"
      "-Wstrlcpy-strlcat-size"
      "-Wstrncat-size"
      "-Wsuggest-destructor-override"
      "-Wsuggest-override"
      "-Wsuper-class-method-mismatch"
      "-Wsuspicious-bzero"
      "-Wsuspicious-memaccess"
      "-Wswift-name-attribute"
      "-Wswitch-bool"
      "-Wsync-alignment"
      "-Wsync-fetch-and-nand-semantics-changed"
      "-Wsynth"
      "-Wtarget-clones-mixed-specifiers"
      "-Wtautological-bitwise-compare"
      "-Wtautological-constant-compare"
      "-Wtautological-constant-in-range-compare"
      "-Wtautological-constant-out-of-range-compare"
      "-Wtautological-negation-compare"
      "-Wtautological-objc-bool-compare"
      "-Wtautological-overlap-compare"
      "-Wtautological-pointer-compare"
      "-Wtautological-type-limit-compare"
      "-Wtautological-undefined-compare"
      "-Wtautological-unsigned-char-zero-compare"
      "-Wtautological-unsigned-enum-zero-compare"
      "-Wtautological-unsigned-zero-compare"
      "-Wtautological-value-range-compare"
      "-Wtcb-enforcement"
      "-Wtemplate-in-declaration-name"
      "-Wtentative-definition-incomplete-type"
      "-Wthread-safety"
      "-Wthread-safety-analysis"
      "-Wthread-safety-attributes"
      "-Wthread-safety-beta"
      "-Wthread-safety-negative"
      "-Wthread-safety-precise"
      "-Wthread-safety-reference"
      "-Wthread-safety-reference-return"
      "-Wthread-safety-verbose"
      "-Wtype-safety"
      "-Wtypedef-redefinition"
      "-Wtypename-missing"
      "-Wunable-to-open-stats-file"
      "-Wunaligned-access"
      "-Wunaligned-qualifier-implicit-cast"
      "-Wunavailable-declarations"
      "-Wundeclared-selector"
      "-Wundef-prefix"
      "-Wundefined-arm-streaming"
      "-Wundefined-arm-za"
      "-Wundefined-arm-zt0"
      "-Wundefined-bool-conversion"
      "-Wundefined-func-template"
      "-Wundefined-inline"
      "-Wundefined-internal"
      "-Wundefined-internal-type"
      "-Wundefined-reinterpret-cast"
      "-Wundefined-var-template"
      "-Wunderaligned-exception-object"
      "-Wunevaluated-expression"
      "-Wunguarded-availability"
      "-Wunguarded-availability-new"
      "-Wunicode"
      "-Wunicode-homoglyph"
      "-Wunicode-whitespace"
      "-Wunicode-zero-width"
      "-Wuninitialized-const-reference"
      "-Wunknown-argument"
      "-Wunknown-assumption"
      "-Wunknown-attributes"
      "-Wunknown-cuda-version"
      "-Wunknown-directives"
      "-Wunknown-escape-sequence"
      "-Wunknown-sanitizers"
      "-Wunknown-warning-option"
      "-Wunnamed-type-template-args"
      "-Wunneeded-internal-declaration"
      "-Wunneeded-member-function"
      "-Wunqualified-std-cast-call"
      "-Wunreachable-code"
      "-Wunreachable-code-aggressive"
      "-Wunreachable-code-break"
      "-Wunreachable-code-fallthrough"
      "-Wunreachable-code-generic-assoc"
      "-Wunreachable-code-loop-increment"
      "-Wunreachable-code-return"
#      "-Wunsafe-buffer-usage"
#      "-Wunsafe-buffer-usage-in-container"
      "-Wunsequenced"
      "-Wunsupported-abi"
      "-Wunsupported-abs"
      "-Wunsupported-availability-guard"
      "-Wunsupported-cb"
      "-Wunsupported-dll-base-class-template"
      "-Wunsupported-floating-point-opt"
      "-Wunsupported-friend"
      "-Wunsupported-gpopt"
      "-Wunsupported-nan"
      "-Wunsupported-target-opt"
      "-Wunsupported-visibility"
      "-Wunusable-partial-specialization"
      "-Wunused-argument"
      "-Wunused-command-line-argument"
      "-Wunused-comparison"
      "-Wunused-exception-parameter"
      "-Wunused-getter-return-value"
      "-Wunused-lambda-capture"
      "-Wunused-local-typedef"
      "-Wunused-member-function"
      "-Wunused-private-field"
      "-Wunused-property-ivar"
      "-Wunused-result"
      "-Wunused-template"
      "-Wunused-variable"
      "-Wunused-volatile-lvalue"
      "-Wused-but-marked-unused"
      "-Wuser-defined-literals"
      "-Wuser-defined-warnings"
      "-Wvarargs"
      "-Wvec-elem-size"
      "-Wvector-conversion"
      "-Wvector-conversions"
      "-Wvexing-parse"
      "-Wvisibility"
      "-Wvla-cxx-extension"
      "-Wvla-extension"
      "-Wvla-extension-static-assert"
      "-Wvoid-pointer-to-enum-cast"
      "-Wvoid-pointer-to-int-cast"
      "-Wvoid-ptr-dereference"
      "-Wwasm-exception-spec"
      "-Wweak-template-vtables"
      "-Wweak-vtables"
      "-Wwritable-strings"
      "-Wzero-as-null-pointer-constant"
      "-Wzero-length-array"
    )

    # https://gcc.gnu.org/onlinedocs/gcc-13.2.0/gcc/Instrumentation-Options.html
    local address_sanitizer_flags=(
        "-fsanitize=address"
        "-fsanitize-address-use-after-scope"
        "-fsanitize=pointer-compare"
        "-fsanitize=pointer-subtract"
        "-fsanitize-address-use-after-return=always"
#        "-fsanitize-address-use-after-return=never"
#        "-fsanitize-address-use-after-return=runtime"
    )

    local cfi_sanitizer_flags=(
        "-fsanitize=cfi"
        "-fsanitize-cfi-cross-dso"
        "-fsanitize-cfi-icall-generalize-pointers"
        "-fsanitize-cfi-icall-experimental-normalize-integers"
        "-fsanitize-cfi-canonical-jump-tables"
        "-fsanitize=cfi-icall"
        "-fsanitize=function"
#        "-fsanitize=kcfi"
        "-fsanitize=cfi-cast-strict"
        "-fsanitize=cfi-derived-cast"
        "-fsanitize=cfi-unrelated-cast"
        "-fsanitize=cfi-nvcall"
        "-fsanitize=cfi-mfcall"
    )

    local dataflow_sanitizer_flags=(
        "-fsanitize=dataflow"
#        "-dfsan-combine-pointer-labels-on-store"
        "-dfsan-combine-offset-labels-on-gep"
#        "-dfsan-event-callbacks"
        "-dfsan-conditional-callbacks"
        "-dfsan-track-origins=2"
#        "-dfsan-instrument-with-call-threshold"
    )

    local hwaddress_sanitizer_flags=(
        "-fsanitize=hwaddress"
    )

    local leak_sanitizer_flags=(
        "-fsanitize=leak"
    )

    local memory_sanitizer_flags=(
        "-fsanitize=memory"
        "-fsanitize-memory-track-origins"
    )

    local pointer_overflow_sanitizer_flags=(
          "-fsanitize=pointer-overflow"
      )

    local safe_stack_flags=(
          "-fsanitize=safe-stack"
      )

    local shadow_call_stack_flags=(
        "-fsanitize=shadow-call-stack"
    )

    local thread_sanitizer_flags=(
        "-fsanitize=thread"
      )

    local undefined_sanitizer_flags=(
        "-fsanitize=undefined"
        "-fsanitize=shift"
        "-fsanitize=shift-exponent"
        "-fsanitize=shift-base"
        "-fsanitize=integer-divide-by-zero"
        "-fsanitize=unreachable"
        "-fsanitize=vla-bound"
        "-fsanitize=null"
        "-fsanitize=return"
        "-fsanitize=signed-integer-overflow"
        "-fsanitize=bounds"
        "-fsanitize=bounds-strict"
        "-fsanitize=alignment"
#        "-fsanitize=object-size"
        "-fsanitize=float-divide-by-zero"
        "-fsanitize=float-cast-overflow"
        "-fsanitize=nonnull-attribute"
        "-fsanitize=returns-nonnull-attribute"
        "-fsanitize=bool"
        "-fsanitize=enum"
        "-fsanitize=vptr"
        "-fsanitize=pointer-overflow"
        "-fsanitize=builtin"
# https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html
        "-fsanitize=array-bounds"
        "-fsanitize=local-bounds"
        "-fsanitize=local-bounds"
        "-fsanitize=function"
        "-fsanitize=implicit-unsigned-integer-truncation"
        "-fsanitize=implicit-signed-integer-truncation"
        "-fsanitize=implicit-integer-sign-change"
        "-fsanitize=nullability-arg"
        "-fsanitize=nullability-assign"
        "-fsanitize=nullability-return"
        "-fsanitize=objc-cast"
        "-fsanitize=unsigned-shift-base"
        "-fsanitize=implicit-conversion"
        "-fsanitize=unsigned-integer-overflow"
    )

    echo "Checking: $compiler"

    # Prepare directory
    local flag_dir="../.flags/${compiler}"
    mkdir -p "$flag_dir"
    rm -f "$flag_dir"/*

    # Process each flag category
    process_compiler_flags "$compiler" "$tmp_src" "analyzer" "${analyzer_flags[@]}"
    process_compiler_flags "$compiler" "$tmp_src" "code_generation" "${code_generation_flags[@]}"
    process_compiler_flags "$compiler" "$tmp_src" "debug" "${debug_flags[@]}"
    process_compiler_flags "$compiler" "$tmp_src" "instrumentation" "${instrumentation_flags[@]}"
    process_compiler_flags "$compiler" "$tmp_src" "optimization" "${optimization_flags[@]}"
    process_compiler_flags "$compiler" "$tmp_src" "warning" "${warning_flags[@]}"
    process_sanitizer_category "$compiler" "$tmp_src" "address" "${address_sanitizer_flags[@]}"
    process_sanitizer_category "$compiler" "$tmp_src" "cfi" "${cfi_sanitizer_flags[@]}"
    process_sanitizer_category "$compiler" "$tmp_src" "dataflow" "${dataflow_sanitizer_flags[@]}"
    process_sanitizer_category "$compiler" "$tmp_src" "hwaddressr" "${hwaddress_sanitizer_flags[@]}"
    process_sanitizer_category "$compiler" "$tmp_src" "leak" "${leak_sanitizer_flags[@]}"
    process_sanitizer_category "$compiler" "$tmp_src" "memory" "${memory_sanitizer_flags[@]}"
    process_sanitizer_category "$compiler" "$tmp_src" "pointer_overflow" "${pointer_overflow_sanitizer_flags[@]}"
    process_sanitizer_category "$compiler" "$tmp_src" "safe_stack" "${safe_stack_flags[@]}"
    process_sanitizer_category "$compiler" "$tmp_src" "shadow_call_stack" "${shadow_call_stack_flags[@]}"
    process_sanitizer_category "$compiler" "$tmp_src" "thread" "${thread_sanitizer_flags[@]}"
    process_sanitizer_category "$compiler" "$tmp_src" "undefined" "${undefined_sanitizer_flags[@]}"

    local cf_protection_flags=(
        "-fcf-protection=full"
        "-fcf-protection=branch"
        "-fcf-protection=return"
        "-fcf-protection=check"
        "-fcf-protection=none"
    )

    # Loop through each flag in cf_protection_flags
    for flag in "${cf_protection_flags[@]}"; do
        # Call is_flag_supported and pass the array by reference
        set +e
        is_flag_supported "$compiler" "$tmp_src" "$flag" "instrumentation"
        set -e

        # Check the return value of the function
        if [[ $? -eq 1 ]]; then
            echo "Supported flag found: $flag"
            break # Exit the loop since a supported flag has been found
        fi
    done

    local profile_flags=(
        "-fprofile-instr-generate"
        "-fprofile-generate"
    )

    # Loop through each flag in cf_protection_flags
    for flag in "${profile_flags[@]}"; do
        # Call is_flag_supported and pass the array by reference
        set +e
        is_flag_supported "$compiler" "$tmp_src" "$flag" "instrumentation"
        set -e

        # Check the return value of the function
        if [[ $? -eq 1 ]]; then
            echo "Supported flag found: $flag"
            break # Exit the loop since a supported flag has been found
        fi
    done
}

# Create a temporary source file at the start
tmp_c_src=$(mktemp "/tmp/test_src_XXXXXX.c")
echo "int main(void) { return 0; }" > "$tmp_c_src"

tmp_cxx_src=$(mktemp "/tmp/test_src_XXXXXX.cpp")
echo "#include <iostream>

class SimpleClass {
public:
    virtual void greet() {
        std::cout << \"Hello, world!\" << std::endl;
    }
    virtual ~SimpleClass() {} // Including a virtual destructor for good practice
};

int main() {
    SimpleClass obj;
    obj.greet();
    return 0;
}" > "$tmp_cxx_src"

trap "rm -f '$tmp_c_src' '$tmp_cxx_src'" EXIT

# Read the list of supported compilers and process each
supported_c_compilers=()
while IFS= read -r line; do
    supported_c_compilers+=("$line")
done < supported_c_compilers.txt

supported_cxx_compilers=()
while IFS= read -r line; do
    supported_cxx_compilers+=("$line")
done < supported_cxx_compilers.txt

# Process C compilers
for compiler in "${supported_c_compilers[@]}"; do
    process_flags "$compiler" "$tmp_c_src"
done

# Process C++ compilers
for compiler in "${supported_cxx_compilers[@]}"; do
    process_flags "$compiler" "$tmp_cxx_src"
done
